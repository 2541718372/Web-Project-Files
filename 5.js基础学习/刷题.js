//============================================================== 001案例 - 交换两个变量的值#====================================================================================
// 方法01 - 使用临时变量
// let x1 = 1,x2 = 2,temp=0; 
// temp=x1;
// x1=x2;
// x2=temp;
// console.log(x1,x2); 

// 方法02 - 不使用第三个变量
// let x1 = 1,x2 = 2; 
// x1 = x1 + x2;  //3
// x2 = x1 - x2;  //2
// x1 = x1 - x2;  // 1
// console.log(x1,x2);

// 方法03 – 
// let x1 = 1,x2 = 2; 
//  x1 = x1^x2;
// x2 = x1^x2;
// x1 = x1^x2;
// console.log(x1,x2);


//===============================================================002案例 - 求两个数的最大值# =====================================================================================

//方法01 - 使用条件判断
// let a = prompt("请输入第一个值: A"),b=prompt("请输入第二个值: B");
// a = parseInt(a),b = parseInt(b);
// if(a > b){
// 	alert("a为最大值");
// }else{
// 	alert("b为最大值");
// }

//方法02 - 使用三元表达式
// alert(a > b ? "a为最大值":"b为最大值");

//===============================================================003案例 - 判断一个数是偶数还是奇数 ======================================================================================

// let a = prompt("请输入第一个自然数: A");
// A = parseInt(a);
// if(A %2!=0 && A !=0){
// 	alert(A+"是奇数");
// }else{
// 	alert(A+"是偶数");
// }

// ==========================================================004案例 - 考分转换，把百分制转换成ABCDE <60 E 60-70 D 70-80 C 80-90 B 90 - 100 A；#==========================================================================

// 方法01 - 使用条件判断
// let a = prompt("请输入您的成绩: ");
// A = parseInt(a);
// if(A<60){
// 	alert("您的等级为 E！");
// }else if(A<70){
// 	alert("您的等级为 D！"); 
// }else if(A<80){
// 	alert("您的等级为 C！"); 
// }else if(A<90){
// 	alert("您的等级为 B！"); 
// }else if(A<100){
// 	alert("您的等级为 A！"); 
// }


// 方法02 - 使用 switch 语句
// let a = prompt("请输入您的成绩: ");

// switch (parseInt(a/10)){
// 	case 1: case 2: case 3: case 4: case 5:  alert("您的等级为 E！"); break;
// 	case 6: alert("您的等级为 D！"); break;
// 	case 7: alert("您的等级为 C！"); break;
// 	case 8: alert("您的等级为 B！"); break;
// 	case 9: case 10: alert("您的等级为 A！"); break;
// 	default: alert("您输入的成绩有误，请尝试重新输入或联系老师！"); break;
// }

// ===============================================================005案列 - 判断一个年龄是否成年, 当年龄超过18 返回成年;否则返回未成年 ======================================================================================

// let a = prompt("请输入您的年龄: ");
// A = parseInt(a);
// if(A >= 18){
// 	alert("恭喜,您已成年!");
// }else{
// 	alert("抱歉,您还未成年!");
// }

//=============================================================== 006案例 - 输入一个数字，打印对应的星期=================================================================================================

// let a = prompt("请输入星期的数字: ");
// switch (parseInt(a%7)){
// 	case 1:	alert("今天是星期一"); break;
// 	case 2:	alert("今天是星期二"); break;
// 	case 3:	alert("今天是星期三"); break;
// 	case 4:	alert("今天是星期四"); break;
// 	case 5:	alert("今天是星期五"); break;
// 	case 6:	alert("今天是星期六"); break;
// 	case 7:	alert("今天是星期日"); break;
// 	default:alert("抱歉您输入的星期数有误");break;
// }

//=============================================================== 007案例 - 打印1-100之间所有的数字================================================================================

// 方法01 - 使用 while 实现
// let i=0;
// while(i<=100){
// 	console.log(i);
// 	i++;
// }

// 方法02 - 使用 for 实现
// for(let i=0;i<=100;i++){
// 	console.log(i);
// }

// ===============================================================008案例 - 计算1-100之间所有数的和#===============================================================================================================

// 方法01 - 使用 while 实现
// let i=1,sum=0;
// while(i<=100){
// 	sum+=i;
// 	i++;	
// }
// console.log("1-100之间所有数的和为:"+sum);

// 方法02 - 使用 for 实现
// let i=1,sum=0;
// for(i=1;i<=100;i++){
// 	sum+=i;	
// }
//console.log("1-100之间所有数的和为:"+sum);

// ===============================================================009案例 - 打印100以内 7的倍数 =============================================================================================================

//let i = 1;
// while( i<=100 ){
// 	if(i%7==0){
// 		console.log(i);
// 	}
// 	i++;
// }

//================================================================010案例 - 打印100以内所有偶数=============================================================================================================

// let i = 0;
// while( i<=100 ){
// 	if(i%2==0){
// 		console.log(i);
// 	}
// 	i++;
// }

// ===============================================================011案例 - 打印100以内所有偶数的和=============================================================================================================

// 方法01 - 使用 while 实现
//  let i = 0,sum=0;
// while( i<=100 ){
// 	if(i%2==0){
// 		sum+=i;
// 	}
// 	i++;
// }
// console.log(sum);

// 方法02 - 使用  for 实现
//  let i = 0,sum = 0;
// for(i=0;i<=100;i++){
// 	if(i%2==0){
// 		sum+=i;
// 	}
// }
// console.log(sum);

// ===============================================================012案例 - 1-100之间所有数字的和=============================================================================================================

// let i=1,sum=0;
// for(i=1;i<=100;i++){
// 	sum+=i;	
// }
// alert("1-100之间所有数的和为:"+sum);

// ===============================================================013案例 - 求100以内所有3的倍数的和=============================================================================================================

// let i = 1,sum=0;
// while( i<=100 ){
// 	if(i%3==0){
// 		sum+=i;
// 	}
// 	i++;
// }
// alert("100以内所有3的倍数的和为："+sum);

//===============================================================014案例 - 使用do-while循环和prompt方法：输出询问“我爱你，嫁给我吧？”=============================================================================================

// do {
// 	prompt("我爱你，嫁给我吧？")
// }while(1);

// ===============================================================015案例 - 求1-100之间所有数的平均值============================================================================================================

// let i=1,sum=0;
// for(i=1;i<=100;i++){
// 	sum+=i;	
// }
// sum/=100;
// alert("1-100之间所有数的平均值为："+sum);

//  =============================================================016案例 - 同时求1-100之间所有偶数和奇数的和========================================================================================================

// let i=1,sum=0,sum1=0;
// for(i=1;i<=100;i++){
// 	if(i%2==0){
// 		sum+=i;
// 	}else{
// 		sum1+=i;
// 	}
// }
// alert("1-100之间所有偶数和:"+sum+"1-100之间所有奇数和为："+sum1);

// =============================================================017案例 - 在控制台打印正方形==================================================================================

 // var s = "",num=prompt("请输入要打印任意行列数的正方形：");
 // for (var i = 0; i < num; i++) {
 // 	for (var j = 0; j < num; j++) {
 // 		s += "*"+" ";
 // 	}
	// s += "\n";
 // }
 // console.log(s);
 
//  =============================================================018案例 - 在控制台打印三角形==========================================================================
 
 // var s = "",num = prompt("请输入要打印任意行数的三角形：");
 // for (var i = 0; i <=num; i++) {
 // 	for (var j = 0; j < i ; j++) {
 // 		s += "*"+" ";
 // 	}
	// s += "\n";
 // }
 // console.log(s);
 
//  =============================================================019案例 - 打印99乘法表==========================================================================
 
 // var s="";
 // for (var i = 1; i <= 9; i++) {
 // 	for (var j = 1; j <=i; j++) {
 // 		s += i+"*"+j+"="+i*j+"\t" ;
 // 	}
	// s += "\n";
 // }
 // console.log(s);
 
//  =============================================================020案例 - 求整数50～200的第一个能被7整除的数==========================================================================

// for(let a=50;a<=200;a++){
// 	if(a%7==0){
// 		alert("整数50～200的第一个能被7整除的数为："+a);
// 		break;
// 	}
// }   

//  =============================================================021案例 - 求整数1～100的累加值，但要求跳过所有个位为3的数==========================================================================

// let i=1,sum=0;
// for(i=1;i<=100;i++){
// 	if(i%10!=3){
// 		sum+=i;
// 	}
// }
// alert("整数1～100的累加值，跳过所有个位为3的数："+sum);


//=============================================================022案例 - 本金10000元存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算5年后，获得的本金是多少？============================================================

// var tmp=1+0.003,b=10000;
// for(let i=0;i<5;i++){
// 	b*=tmp;
// }
// alert("计算5年后，获得的本金是:"+parseInt(b))

//============================================================023案例 - 已知一对兔子每个月可以生一对小兔子，而一对兔子从出生后第3个月起每月生一对小兔子。假如一年内没有发生死亡现象，那么，一对兔子一年内（12个月）能繁殖成多少对？


// let pre = cnt = 1;
// for (let i = 3; i <= 12; i++) {
// 	let tmp = cnt;
// 	cnt += pre; // 当前月的兔子数量等于前一个月和前两个月兔子数量之和
// 	pre = tmp;
// }
// alert("一对兔子一年能繁殖成"+cnt+"对");//属实是没能看懂，太妙了

// ============================================================024案例 - 求一组数中的所有数的和与平均值============================================================

// var numbers = [],sum = 0,inNum = prompt("请输入一组以空格分隔的数：");
// numbers = inNum.split(" ");
// for (let i = 0; i < numbers.length; i++) {
//     numbers[i] = parseFloat(numbers[i]);
// 	sum += numbers[i];
// }

// var avg = sum / numbers.length;
// alert("所有数的和为：" + sum+"\n所有数的平均值为：" + avg);

// ============================================================025案例 - 求一组数中的最大值和最小值，以及所在位置==========================================================================================================

// var numbers = [],inNum = prompt("请输入一组以空格分隔的数：");
// numbers = inNum.split(" ").map(Number); 

// var maxValue = numbers[0], maxIndex = 0;
// var minValue = numbers[0], minIndex = 0;

// for (var i = 0; i < numbers.length; i++) {
//     if (numbers[i] > maxValue) {
//         maxValue = numbers[i];
//         maxIndex = i;
//     }
//     if (numbers[i] < minValue) {
//         minValue = numbers[i];
//         minIndex = i;
//     }
// }

// alert("原数组中数"+numbers+"\n"
// +"最大值为:"+ maxValue+ "，位置:"+ maxIndex+"\n"
// +"最小值为:"+ minValue+ "，位置:"+ minIndex);

// ============================================================026案例 - 将字符串数组用|或其他符号分割============================================================
// 方法01 - 使用 for 循环

// var numbers = [],inNum = prompt("请输入一组以空格分隔的数："),arrStr ="|",str=" ";
// numbers = inNum.split(" ").map(Number);
 
// for(var i = 0; i < numbers.length; i++){
// 	str += numbers[i];
// 	if(i<numbers.length-1){
// 		str+=arrStr;
// 	}
// }
// alert("加上分割线后："+str);

// 方法02 - 使用数组的方法

// ============================================================027案例 - 要求将不为0的值存入一个新的数组，生成新的数组============================================================

// var numbers = newnum =[], inNum = prompt("请输入一组以空格分隔的数：");
// numbers = inNum.split(" ").map(Number);

// for (var i = 0; i < numbers.length; i++) {
//     if (numbers[i] != 0) {
//         newnum.push(numbers[i]);
//     }
// }
// alert("新的数组为："+newnum);

//  ============================================================028案例 - 翻转数组   ============================================================   

// let num = tmp =  [], input = prompt("请输入一组以空格分隔的数：");
// num = input.split(" ").map(Number);
// for (let i = num.length - 1; i >= 0; i--) {
// 	 tmp.push(num[i]);
// }
// num = tmp;
// alert("翻转后数组为："+num);

// ============================================================029案例 - 冒泡排序============================================================

// var numbers = [];
// var inNum = prompt("请输入一组以空格分隔的数：");
// numbers = inNum.split(" ").map(Number);

// for (let i = 0; i < numbers.length; i++) {
//     for (let j = 0; j < numbers.length - 1; j++) {
//         if (numbers[j] < numbers[j + 1]) {
//             let tmp = numbers[j];
//             numbers[j] = numbers[j + 1];
//             numbers[j + 1] = tmp;
//         }
//     }
// }
// alert(numbers);

// ============================================================ 030案列 - 封装一个函数，可以求一组数的最大值。 ============================================================

// var numbers = [], inNum = prompt("请输入一组以空格分隔的数：");
// numbers = inNum.split(" ").map(Number);

// function findMax(...numbers) {
//     if (numbers.length === 0) {
//         return undefined; // 如果没有输入任何数，则返回undefined
//     }
//     return Math.max(...numbers); // 使用Math.max函数找到最大值
// }

// console.log("输入的数为:", numbers);
// console.log("最大值为:", findMax(...numbers));

// 031案例 - 封装一个函数可以求任意个数的和

// ============================================================032案例 - 求斐波那契数列Fibonacci中的第n个数是多少？============================================================

// function fibonacci(n) {
//   if (n <= 1) {
//     return n;
//   } else {
//     return fibonacci(n - 1) + fibonacci(n - 2);
//   }
// }
// alert(fibonacci(12)); 

// ============================================================033案例 - 翻转数组，返回一个新数组============================================================

// let num = [], input = prompt("请输入一组以空格分隔的数："),Fz = [];
// num = input.split(" ");
// for (let i = num.length - 1; i >= 0; i--) {
// 	 Fz.push(num[i]);
// }
// alert("原来数组为："+num+"\n"+"翻转后得到："+Fz);


// ============================================================034案例 - 对数组排序，从小到大 -- 使用冒泡排序============================================================

// var numbers = [];
// var inNum = prompt("请输入一组以空格分隔的数：");
// numbers = inNum.split(" ").map(Number);

// for (let i = 0; i < numbers.length; i++) {
//     for (let j = 0; j < numbers.length - 1; j++) {
//         if (numbers[j] > numbers[j + 1]) {
//             let tmp = numbers[j];
//             numbers[j] = numbers[j + 1];
//             numbers[j + 1] = tmp;
//         }
//     }
// }
// alert(numbers);

// ============================================================035案例 - 输入一个年份，判断是否是闰年[闰年：能被4整数并且不能被100整数，或者能被400整数。============================================================

// var year = parseInt(prompt("请输入要判断的年: "));
// if((year%4 == 0 && year %100 != 0 )|| year %400 == 0){
// 	alert("该年是闰年");
// }else{
// 	alert("该年不是闰年");
// }

// ============================================================036案例 - 输入某年某月某日，判断这一天是这一年的第几天？============================================================

// var sum=0,i=1;
// var year = parseInt(prompt("请输入要判断的年: "));
// var month = parseInt(prompt("请输入要判断的月: "));
// var day = parseInt(prompt("请输入要判断的日: "));

// while(i<=month){
// 	if(day<=31){
// 		switch (i){
// 			case 1: sum+= day;break;
// 			case 2: sum+=31;break;
// 			case 3: if((year%4 == 0 && year %100 != 0 )|| year %400 == 0){
// 				sum+=29;
// 			}else{
// 				sum+=28;
// 			};break;
// 			case 4: sum+= 31;break;
			
// 			case 5: sum+= 30;break;
// 			case 6: sum+= 31;break;
// 			case 7: sum+= 30;break;
// 			case 8: sum+= 31;break;
			
// 			case 9: sum+= 31;break;
// 			case 10: sum+= 30;break;
// 			case 11: sum+= 31;break;
// 			case 12: sum+= 30;break;
// 			default :  alert("您输入的月份有问题请重新输入！！！");  break;
// 		}
// 	}alert("您输入的日子有问题请重新输入！！！");
// 	i++;
// }
// alert("你的输入的日期为"+year+"中的第"+sum+"天");

// ============================================================037案例 - 求10-20之间的随机数 [10, 20] 整数============================================================

// alert(parseInt(Math.random()*10+10));

// ============================================================038案例 - 随机生成颜色RGB [0, 255] 整数============================================================

// var r = Math.floor(Math.random() * 256); 
// var g = Math.floor(Math.random() * 256);
// var b = Math.floor(Math.random() * 256);
// alert('RGB(' + r + ', ' + g + ', ' + b + ')')

// ============================================================039案例 - 模拟实现 max()/min() 方法 ,并封装============================================================

// function max (num) {
// 	var maxValue = num[0];
// 	for (var i = 0; i < num.length; i++) {
// 	    if (num[i] > maxValue) {
// 	        maxValue = num[i];
// 	    }
// 	}
// 	return maxValue;
// }

// function min (num) {
// 	var minValue = num[0];
// 	for (var i = 0; i < num.length; i++) {
// 	    if (num[i] < minValue) {
// 	        minValue = num[i];
// 	    }
// 	}
// 	return minValue;
// }
// var MaxNumber = MinNumber = [];
 
// MaxNumber = prompt("请输入一组以空格分隔的数计算 最大值：").split(" ").map(Number); 
// MinNumber = prompt("请输入一组以空格分隔的数计算 最小值：").split(" ").map(Number); 

// alert("原来数组："+MaxNumber+"\n"+"最大值为："+max(MaxNumber));
// alert("原来数组："+MinNumber+"\n"+"最小值为："+min(MinNumber));

// ============================================================040案例 - 封装一个函数，格式化日期对象，返回yyyy-MM-dd HH:mm:ss的形式============================================================

// function DisTime() {
//     var Momnet = ['', '', '', '', '', '']; 
//     var sysData = new Date();
//     Momnet[0] = sysData.getFullYear();
//     Momnet[1] = sysData.getMonth() + 1; // 获取当前月份(0-11,0代表1月)
//     Momnet[2] = sysData.getDate();
//     Momnet[3] = sysData.getHours();
//     Momnet[4] = sysData.getMinutes();
//     Momnet[5] = sysData.getSeconds();

//     for (let i = 1; i < Momnet.length; i++) {
//         if (Momnet[i] < 10) {
//             Momnet[i] = '0' + Momnet[i];
//         }
//     }

//     var SysTime = Momnet[0] + "-" + Momnet[1] + "-" + Momnet[2] + " " + Momnet[3] + ":" + Momnet[4] + ":" + Momnet[5];
//     return SysTime;
// }
// alert("当前系统时间为：" + DisTime());

// ============================================================041案例 - 将一个字符串数组的元素的顺序进行反转。============================================================

// let num  =  tmp = ' ';
// num = prompt("请输入一组以空格分隔的数：");

// for (let i = num.length - 1; i >= 0; i--) {
// 	tmp += num[i];
// }
// num = tmp;
// alert("反转顺序后元素为："+num);

// ============================================================042案例 - 工资的数组[1500, 1200, 2000, 2100, 1800],把工资超过2000的删除============================================================

// var GoZi=[1500, 1200, 2000, 2100, 1800];
// for(let i = 0; i < GoZi.length; i++){
// 	if(GoZi[i]>2000){
// 		GoZi.splice(i,1);
// 	}
// }
// alert("删除后的数组为："+GoZi);

// ============================================================043案例 - 找到数组['c', 'a', 'z', 'a', 'x', 'a']中每一个a出现的位置============================================================

// var ZiMu=['c', 'a', 'z', 'a', 'x', 'a'],cnt=0;
// for(let i = 0; i < ZiMu.length; i++){
// 	if(ZiMu[i]=="a"){
// 		cnt++;
// 		console.log("第"+cnt+"个a的下标位置为："+i);
// 	}
// }

// ============================================================044案例 - 编写一个方法去掉一个数组['c', 'a', 'z', 'a', 'x', 'a']的重复元素============================================================

// const arr = ['c', 'a', 'z', 'a', 'x', 'a'];
// const uniqueArr = [];
// for (let i = 0; i < arr.length; i++) {
//     if (uniqueArr.indexOf(arr[i]) === -1) {
//         uniqueArr.push(arr[i]);
//     }
// }
// alert("去重后:"+uniqueArr);

// ============================================================045案例 - 截取字符串"我爱中华人民共和国"，中的"中华"============================================================

// var str = "我爱中华人民共和国";
// var subStr = str.substring(2, 4);
// alert(subStr); 

// ============================================================046案例 - "abcoefoxyozzopp"查找字符串中所有o出现的位置============================================================

// var ZiMu='abcoefoxyozzopp',index=[];
// for(let i = 0; i < ZiMu.length; i++){
// 	if(ZiMu[i]=="o"){
// 		index+=i+' ';
// 	}
// }
// alert("每个o的下标位置依次为："+index);

// ============================================================047案例 - 把字符串中所有的o替换成!============================================================

// var str = prompt("请输入字符串");//JavaScript 没法直接修改字符串  只能选择创建新的变量替换
// var newStr = '';
// for (let i = 0; i < str.length; i++) {
//     if (str[i] == 'o') {
//         newStr += '!';
//     } else {
//         newStr += str[i];
//     }
// }
// alert("原来的字符串为："+str+"\n"+"替换后字符串为："+newStr);

// ============================================================048案例 - 把字符串中的所有空白去掉' abc xyz a 123 '============================================================

// var str = ' abc xyz a 123 ';
// var arr = '';
// for (var i = 0; i < str.length; i++) {
//     if (str[i] != ' ') {
//         arr += str[i];
//     }
// }
// alert("删除后字符串为:"+arr); 

//============================================================ 049案例 - 判断一个字符串中出现次数最多的字符，统计这个次数============================================================

// ============================================================050案例 - 获取url中?后面的内容============================================================




